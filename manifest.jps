type: install
version: 8.1
id: gunicorn
baseUrl: https://raw.githubusercontent.com/TBxy/jelastic-gunicorn-jps/master
logo: /images/gunicorn.png?_r=${fn.random}
homepage: http://gunicorn.org
name: "PythonApp"

globals:
  home: /var/www/webroot
  webroot: /var/www/webroot
  app_workdir: /var/www/webroot/ROOT
  app_venv: /var/www/webroot/ROOT/.venv
  gunicorn_conf: /etc/gunicorn/conf/gunicorn.conf.py
settings:
  fields:
  - type: compositefield
    caption: Cloudlets 
    defaultMargins:
      top: 0
      right: 10 
      bottom: 0
      left: 0
    items:
    - type: spinner
      #caption: Reserved 
      name: res_cloudlets
      min: 1
      max: 32
      default: 1
      increment: 1
      width: 75
    - type: tooltip
      text: Reserved
      x: -5
    - type: spinner
      name: dyn_cloudlets
      min: 0
      max: 32
      default: 4
      increment: 1
      width: 75
    - type: tooltip
      text: Dynamic
      x: -5
  - type: displayfield
  - type: list
    name: worker_class
    caption: Worker Class
    default: "uvicorn.workers.UvicornWorker"
    values:
      gthread: gthread (wsgi)
      sync: sync (wsgi)
      uvicorn.workers.UvicornWorker: uvicorn (asgi)
    editable: false
    width: 200
  - type: compositefield
    caption: Workers
    defaultMargins:
      top: 0
      right: 5 
      bottom: 0
      left: 0
    items:
      - type: spinner
        caption: Workers
        name: workers
        min: 1
        max: 20
        default: 3
        increment: 1
        width: 75
      - type: tooltip
        text: "Number of workers, if set to 'auto' this is the start value."
        x: -5
      - type: displayfield
        markup: "Max"
        margins: 5 11 0 0
      - type: spinner
        caption: Workers
        name: max_workers
        min: 1
        max: 20
        default: 12
        width: 75
      - type: tooltip
        text: "Maximum number of workers in case of auto-scaling."
        x: -5
      - type: displayfield
        markup: "Auto Scaling"
        margins: 5 11 0 20
      - type: toggle
        hideLable: false
        caption: "Auto Scaling"
        name: auto_workers
        default: false
  - type: toggle
    caption: "Preload App"
    name: preload_app
    default: false
    tooltip: "Preloads app for workers, reduces memory but restart is needed instead of reload"
  - type: displayfield
  - type: toggle
    caption: "Full 'sudo' Access"
    name: sudo
    default: true
    tooltip: "Add group 'ssh-access' to sudoers file, otherwise only some services can be restarted."
  

nodes:
  nodeType: apache-python
  cloudlets: ${settings.dyn_cloudlets} 
  fixedCloudlets: ${settings.res_cloudlets} 
  displayName: App Server Gunicorn

onInstall:
  - if (settings.sudo):
    - add-sudo-all
  - adjust-env-vars
  - install-poetry
  - install-gunicorn
  - add-favorites
  - add-example-app
  - install-extras
  #- start-gunicorn

# auto scaling if GUNICORN_WORKERS_AUTO
onBeforeSetCloudletCount:
  - cmd[cp]: |-
      echo "$(date) - event 'onBeforeSetCloudletCount': res:{$event.params.fixedCloudlets}, dyn:{$event.params.dynamicCloudlets}" >> ${globals.home}/events
      /usr/local/sbin/vertical-scaling "before" "${event.params.fixedCloudlets}" "${event.params.dynamicCloudlets}"

onAfterSetCloudletCount:
  - cmd[cp]: |-
      echo "$(date) - event 'onAfterSetCloudletCount': res:{$param.fixedCloudlets}, dyn:{$param.dynamicCloudlets}" >> ${globals.home}/events
      /usr/local/sbin/vertical-scaling "after" "${event.params.fixedCloudlets}" "${event.params.dynamicCloudlets}"

#onBeforeRestartNode:
onAfterRestartNode:
  - cmd[cp]: |-
      echo "$(date) - event 'onAfterRestartNode'" >> ${globals.home}/events

onAfterRestartContainer:
  - cmd[cp]: |-
      echo "$(date) - event 'onAfterRestartContainer'" >> ${globals.home}/events

onAfterStart:
  - cmd[cp]: |-
      echo "$(date) - event 'onAfterStart'" >> ${globals.home}/events

onAfterSetEnvVar:
  - cmd[cp]: |-
      echo "$(date) - event 'onAfterSetEnvVar'" >> ${globals.home}/events

actions:
  adjust-env-vars:
    - if (settings.worker_class == 'sync' || settings.worker_class == 'gthread'):
        set:
          app_module: "wsgi:app"
    - else:
        set:
          app_module: "asgi:app"
    - api[cp]: env.control.AddContainerEnvVars
      vars:
        APP_MODULE: ${this.app_module}
        APP_WORKDIR: ${globals.app_workdir}
        APP_VENV: ${globals.app_venv}
        APP_PRELOAD: ${settings.preload_app}
        APP_RELOAD: false
        APP_PORT: 80
        GUNICORN_CONF: ${globals.gunicorn_conf}
        GUNICORN_LOG_LEVEL: "info"
        GUNICORN_MAX_REQUESTS: "2000"
        GUNICORN_WORKER_CLASS: ${settings.worker_class}
        GUNICORN_WORKERS: ${settings.workers}
        GUNICORN_WORKERS_MAX: ${settings.max_workers}
        GUNICORN_WORKERS_AUTO: ${settings.auto_workers}
        GUNICORN_WORKERS_ADD_AUTO: 2
        THREADS: 1
    - api[cp]: env.control.RemoveContainerEnvVars
      vars: ["WSGI_SCRIPT", "MOD_WSGI_VERSION"]
  add-favorites:
    - api[cp]: env.file.AddFavorite
      path: ${globals.gunicorn_conf}
      isDir: false
    - api[cp]: env.file.AddFavorite
      path: /var/log/gunicorn
    - api[cp]: env.file.AddFavorite
      path: /var/lib/jelastic/hooks/postDeploy_ROOT.sh
      isDir: false
    - api[cp]: env.file.AddFavorite
      path: /usr/local/sbin/vertical-scaling
      isDir: false
  install-extras:
    - log: "install extra usful packages"
    - user: root
      cmd[cp]: |-
        yum install -y stress htop
  install-poetry:
    - user: root
      cmd[cp]: |-
        python -m venv /opt/poetry
        /opt/poetry/bin/pip install -U pip setuptools
        /opt/poetry/bin/pip install poetry
        ln -s /opt/poetry/bin/poetry /usr/bin/poetry
    - cmd[cp]: |-
        poetry config virtualenvs.in-project true
        python -m venv ${globals.app_venv}
    - user: root
      cmd[cp]: |-
        curl -sS  ${baseUrl}/var/jelastic/customisations/deploy.lib?_r=${fn.random} > /var/jelastic/customisations/deploy.lib
        chmod +x /var/jelastic/customisations/deploy.lib
  install-gunicorn:
    - log: "install gunicorn"
    - log: "disable httpd"
    - user: root
      cmd[cp]: |-
        systemctl stop httpd
        systemctl disable httpd
        sed -i 's\httpd\gunicorn\' /var/lib/jelastic/overrides/envinfo.lib
        sed -i 's\httpd\gunicorn\' /var/lib/jelastic/overrides/deploy.lib
    - log: "copy gunicorn config"
    - user: root
      cmd[cp]: |-
        mkdir -p $(dirname ${globals.gunicorn_conf})
        curl -sSf ${baseUrl}/etc/gunicorn/conf/gunicorn.conf.py?_r=${fn.random} > ${globals.gunicorn_conf}
        /usr/bin/setfacl -m g:ssh-access:wr  ${globals.gunicorn_conf} >&/dev/null;
    - log: "add gunicorn service"
    - user: root
      cmd[cp]: |-
        curl -sS  ${baseUrl}/etc/system/gunicorn.service?_r=${fn.random} > /etc/systemd/system/gunicorn.service
        curl -sS  ${baseUrl}/etc/sudoers.d/gunicorn?_r=${fn.random} > /etc/sudoers.d/gunicorn
        chmod 0440 /etc/sudoers.d/gunicorn
        mkdir -p /var/log/gunicorn
        touch /etc/sysconfig/gunicorn
        # update pythonAutoConf script
        cp  /usr/local/sbin/pythonAutoConf /usr/local/sbin/pythonAutoConf.httpd.sh
        curl -sS  ${baseUrl}/scripts/pythonAutoConf.gunicorn.sh?_r=${fn.random} > /usr/local/sbin/pythonAutoConf.gunicorn.sh
        chmod +x /usr/local/sbin/pythonAutoConf.gunicorn.sh
        # gunicorn env script
        curl -sS  ${baseUrl}/scripts/gunicorn-env?_r=${fn.random} > /usr/local/sbin/gunicorn-env
        chmod +x /usr/local/sbin/gunicorn-env
        ln -s /usr/local/sbin/gunicorn-env /usr/bin/gunicorn
        # vertical scaling script
        curl -sS  ${baseUrl}/scripts/vertical-scaling?_r=${fn.random} > /usr/local/sbin/vertical-scaling
        chmod +x /usr/local/sbin/vertical-scaling
        # allow editing
        /usr/bin/setfacl -m g:ssh-access:wr  /usr/local/sbin/vertical-scaling >&/dev/null;
        #chmod 0666 /usr/local/sbin/vertical-scaling
        systemctl daemon-reload
        systemctl enable gunicorn
  start-gunicorn:
    - log: "start gunicorn"
    - user: root
      cmd[cp]: |-
        systemctl start gunicorn
  add-example-app:
    - deploy:
        archive: https://github.com/TBxy/python-app/archive/refs/heads/master.zip
        name: "Hello World"
        context: "ROOT"
    #- user: root
    #  cmd[cp]: |-
    #    echo "${globals.webroot}/post-deploy.sh" > /var/lib/jelastic/hooks/postDeploy_ROOT.sh
    #- addContext [cp]:
    #    - name: ROOT
    #      fileName: git@github.com:TBxy/python-app.git
    #      type: GIT
  add-sudo-all:
    - log: "add ssh-access to sudoers"
    - user: root
      cmd[cp]: |-
        echo "%ssh-access    ALL= NOPASSWD: ALL" >> /etc/sudoers

success: |
  Below you will find your domain name link.  
  Domain name URL: [${env.protocol}://${env.domain}/](${env.protocol}://${env.domain}/)  
  To add custom domain name for your application follow the steps described in our [documentation](http://docs.jelastic.com/custom-domains)
